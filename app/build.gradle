import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'

if(getCurrentFlavor() == "play"){
    apply plugin: 'io.fabric'
}


android {
    compileSdkVersion 27
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "se.oandell.riksdagen"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 21
        versionName "2.10.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        debug{

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    flavorDimensions 'version'
    productFlavors {
        play {
            // Add API keys to project from local gradle.properties
            dimension 'version'
            buildConfigField 'String', "SafetyApiKey", SAFETY_API_KEY
        }
        fdroid {
            dimension 'version'
        }
    }
}


repositories {
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://maven.fabric.io/public'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:3.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:3.0.2"
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:customtabs:27.1.1'
    implementation "com.android.support:support-compat:27.1.1"
    implementation 'com.google.code.gson:gson:2.8.2'
    playImplementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }
    playImplementation "com.google.android.gms:play-services-safetynet:16.0.0"
    playImplementation 'com.google.firebase:firebase-core:16.0.4'

    implementation 'com.android.volley:volley:1.1.0'
    implementation 'org.jsoup:jsoup:1.11.2'
    implementation 'com.google.android:flexbox:1.0.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.github.franmontiel:AttributionPresenter:1.0'
    implementation 'com.evernote:android-job:1.2.4'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.github.smart-fun:XmlToJson:1.4.4'    // add this line
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    println(getCurrentFlavor());

}


def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return "";
    }
}


apply plugin: 'com.google.gms.google-services'
