buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "se.oandell.riksdagen"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 13
        versionName "2.5.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        debug {
            // Add API keys to project from local gradle.properties
            buildConfigField 'String', "SafetyApiKey", SAFETY_API_KEY
            resValue 'string', "fabricApiKey", fabricApiKey
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Add API keys to project from local gradle.properties
            buildConfigField 'String', "SafetyApiKey", SAFETY_API_KEY
            resValue 'string', "fabricApiKey", fabricApiKey
        }
    }
}

allprojects {
    repositories {
        maven {
            url 'https://jitpack.io'
        }
    }
}

afterEvaluate {
    buildFabricPropertiesIfNeeded()
}

/**
 *
 * build fabric properties file, if missing
 */
def buildFabricPropertiesIfNeeded() {
    def propertiesFile = file("fabric.properties")
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: System.getenv('apiSecret'))
            entry(key: "apiKey", value: System.getenv('apiKey'))
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.volley:volley:1.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'org.jsoup:jsoup:1.11.2'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.google.android:flexbox:1.0.0'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.github.franmontiel:AttributionPresenter:1.0'
    implementation 'com.android.support:customtabs:27.1.1'
    implementation 'com.evernote:android-job:1.2.4'
    implementation "com.android.support:support-compat:27.1.1"

    implementation "com.google.android.gms:play-services-safetynet:15.0.1"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    implementation 'junit:junit:4.12'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true;
    }
}
