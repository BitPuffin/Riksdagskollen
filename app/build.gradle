import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
}

apply plugin: 'com.android.application'

if(getCurrentFlavor() == "play"){
    apply plugin: 'io.fabric'
}


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "se.oandell.riksdagen"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 29

        versionName "2.13.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        debug {

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging {
            //testing library ui-automator needs min-sdk 18
            defaultConfig.minSdkVersion 18
        }
    }
    flavorDimensions 'version'
    productFlavors {
        play {
            // Add API keys to project from local gradle.properties
            dimension 'version'
            buildConfigField 'String', "TwitterApiKey", TWITTER_API_KEY
        }
        fdroid {
            buildConfigField('String', 'TwitterApiKey', '"Dummy key, not used"')
            dimension 'version'
            buildConfigField 'String', "TwitterApiKey", TWITTER_API_KEY
        }
    }
    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    useLibrary 'android.test.mock'
}


repositories {
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://maven.fabric.io/public'
    }
    mavenCentral()
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.core:core:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.2'
    //playImplementation "com.google.android.gms:play-services-safetynet:16.0.0"
    playImplementation 'com.google.firebase:firebase-core:16.0.9'
    playImplementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true;
    }
    implementation 'com.android.volley:volley:1.1.0'
    implementation 'org.jsoup:jsoup:1.11.2'
    implementation 'com.google.android:flexbox:1.0.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.github.franmontiel:AttributionPresenter:1.0'
    implementation 'com.evernote:android-job:1.2.4'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.github.smart-fun:XmlToJson:1.4.4'
    // add this line
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

}


def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return "";
    }
}


apply plugin: 'com.google.gms.google-services'
